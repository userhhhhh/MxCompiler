   .section .text
   .globl __init
__init:
   addi sp, sp, -20
   sw t0, 8(sp)
   sw t1, 12(sp)
   # phi start
   # phi end
   sw t2, 16(sp)

   .section .text
   .globl __init_entry
__init_entry:
   # %var0 = call ptr @__array.alloca(i32 4, i32 1, i32 1, i32 20)

   sw ra, 4(sp)
   li a0, 4
   li a3, 20
   li a2, 1
   li a1, 1
   call __array.alloca
   lw ra, 4(sp)
   mv x3, a0
   # store ptr %var0, ptr @a

   la t1, @a
   sw x3, 0(t1)
   # ret void

   addi sp, sp, 20
   lw t0, -12(sp)
   lw t1, -8(sp)
   lw t2, -4(sp)
   # phi start
   # phi end
   ret

   .section .text
   .globl jud
jud:
   addi sp, sp, -44
   sw t0, 32(sp)
   sw t1, 36(sp)
   sw t2, 40(sp)
   # phi start
   # phi end
   mv x3, a0

   .section .text
   .globl jud_entry
jud_entry:
   # br label %for.cond.0

   # phi start
   li x4, 0
   # phi end
   j jud_for.cond.0

   .section .text
   .globl jud_for.cond.0
jud_for.cond.0:
   # %var3 = load i32, ptr @n

   la t0, @n
   lw x8, 0(t0)
   # %var5 = sdiv i32 %var3, %x

   div x8, x8, x3
   # %var6 = icmp slt i32 %i.1_for.cond.0, %var5

   sub t2, x4, x8
   sltz    x8, t2
   # br i1 %var6, label %for.body.0, label %for.back.0

   bne      x8, x0, .+8
   j jud_for.back.0
   # phi start
   # phi end
   j jud_for.body.0

   .section .text
   .globl jud_for.body.0
jud_for.body.0:
   # br label %for.cond.1

   # phi start
   li x9, 0
   li x8, 0
   # phi end
   j jud_for.cond.1

   .section .text
   .globl jud_for.cond.1
jud_for.cond.1:
   # %var10 = sub i32 %x, 1

   # %var11 = icmp slt i32 %j.1_for.cond.1, %var10

   sub t2, x8, a0
   sltz    a0, t2
   # br i1 %var11, label %for.body.1, label %for.back.1

   bne      a0, x0, .+8
   j jud_for.back.1
   # phi start
   # phi end
   j jud_for.body.1

   .section .text
   .globl jud_for.body.1
jud_for.body.1:
   # %var12 = load ptr, ptr @a

   la t0, @a
   lw a0, 0(t0)
   # %var15 = mul i32 %i.1_for.cond.0, %x

   mul a1, x4, x3
   # %var17 = add i32 %var15, %j.1_for.cond.1

   add a1, a1, x8
   # %var18 = getelementptr i32, ptr %var12, i32 %var17

   mv t0, a0
   mv t1, a1
   li t2, 4
   mul t1, t1, t2
   add t0, t1, t0
   mv a0, t0
   # %var19 = load i32, ptr %var18

   mv t0, a0
   lw a0, 0(t0)
   # %var20 = load ptr, ptr @a

   la t0, @a
   lw a1, 0(t0)
   # %var23 = mul i32 %i.1_for.cond.0, %x

   mul a2, x4, x3
   # %var25 = add i32 %var23, %j.1_for.cond.1

   add a2, a2, x8
   # %var26 = add i32 %var25, 1

   addi a2, a2, 1
   # %var27 = getelementptr i32, ptr %var20, i32 %var26

   mv t0, a1
   mv t1, a2
   li t2, 4
   mul t1, t1, t2
   add t0, t1, t0
   mv a1, t0
   # %var28 = load i32, ptr %var27

   mv t0, a1
   lw a1, 0(t0)
   # %var29 = icmp sgt i32 %var19, %var28

   sub t2, a0, a1
   sgtz    a0, t2
   # br i1 %var29, label %if.then.0, label %if.else.0

   bne      a0, x0, .+8
   j jud_if.else.0
   # phi start
   # phi end
   j jud_if.then.0

   .section .text
   .globl jud_if.then.0
jud_if.then.0:
   # br label %if.back.0

   # phi start
   li x9, 1
   # phi end
   j jud_if.back.0

   .section .text
   .globl jud_if.else.0
jud_if.else.0:
   # br label %if.back.0

   # phi start
   # phi end
   j jud_if.back.0

   .section .text
   .globl jud_if.back.0
jud_if.back.0:
   # br label %for.step.1

   # phi start
   # phi end
   j jud_for.step.1

   .section .text
   .globl jud_for.step.1
jud_for.step.1:
   # %var32 = add i32 %j.1_for.cond.1, 1

   addi x8, x8, 1
   # br label %for.cond.1

   # phi start
   # phi end
   j jud_for.cond.1

   .section .text
   .globl jud_for.back.1
jud_for.back.1:
   # %var34 = xor i1 %flag.1_for.cond.1, true

   xori x8, x9, 1
   # br i1 %var34, label %if.then.1, label %if.else.1

   bne      x8, x0, .+8
   j jud_if.else.1
   # phi start
   # phi end
   j jud_if.then.1

   .section .text
   .globl jud_if.then.1
jud_if.then.1:
   # ret i32 1

   li a0, 1
   addi sp, sp, 44
   lw t0, -12(sp)
   lw t1, -8(sp)
   lw t2, -4(sp)
   # phi start
   # phi end
   ret

   .section .text
   .globl jud_if.else.1
jud_if.else.1:
   # br label %if.back.1

   # phi start
   # phi end
   j jud_if.back.1

   .section .text
   .globl jud_if.back.1
jud_if.back.1:
   # br label %for.step.0

   # phi start
   # phi end
   j jud_for.step.0

   .section .text
   .globl jud_for.step.0
jud_for.step.0:
   # %var36 = add i32 %i.1_for.cond.0, 1

   addi x4, x4, 1
   # br label %for.cond.0

   # phi start
   # phi end
   j jud_for.cond.0

   .section .text
   .globl jud_for.back.0
jud_for.back.0:
   # ret i32 0

   li a0, 0
   addi sp, sp, 44
   lw t0, -12(sp)
   lw t1, -8(sp)
   lw t2, -4(sp)
   # phi start
   # phi end
   ret

   .section .text
   .globl main
main:
   addi sp, sp, -32
   sw t0, 20(sp)
   sw t1, 24(sp)
   # phi start
   # phi end
   sw t2, 28(sp)

   .section .text
   .globl main_entry
main_entry:
   # call void @__init()

   sw ra, 16(sp)
   call __init
   lw ra, 16(sp)
   sw a0, 8(sp)
   # %var39 = call i32 @getInt()

   sw ra, 16(sp)
   call getInt
   lw ra, 16(sp)
   mv x3, a0
   # store i32 %var39, ptr @n

   la t1, @n
   sw x3, 0(t1)
   # store i32 0, ptr @i

   li t0, 0
   la t1, @i
   sw t0, 0(t1)
   # br label %for.cond.2

   # phi start
   # phi end
   j main_for.cond.2

   .section .text
   .globl main_for.cond.2
main_for.cond.2:
   # %var41 = load i32, ptr @i

   la t0, @i
   lw x3, 0(t0)
   # %var42 = load i32, ptr @n

   la t0, @n
   lw x4, 0(t0)
   # %var43 = icmp slt i32 %var41, %var42

   sub t2, x3, x4
   sltz    x3, t2
   # br i1 %var43, label %for.body.2, label %for.back.2

   bne      x3, x0, .+8
   j main_for.back.2
   # phi start
   # phi end
   j main_for.body.2

   .section .text
   .globl main_for.body.2
main_for.body.2:
   # %var44 = load ptr, ptr @a

   la t0, @a
   lw x3, 0(t0)
   # %var45 = load i32, ptr @i

   la t0, @i
   lw x4, 0(t0)
   # %var46 = getelementptr i32, ptr %var44, i32 %var45

   mv t0, x3
   mv t1, x4
   li t2, 4
   mul t1, t1, t2
   add t0, t1, t0
   mv x3, t0
   # %var48 = call i32 @getInt()

   sw ra, 16(sp)
   sw x3, 0(sp)
   call getInt
   lw ra, 16(sp)
   mv x4, a0
   lw x3, 0(sp)
   # store i32 %var48, ptr %var46

   sw x4, 0(x3)
   # br label %for.step.2

   # phi start
   # phi end
   j main_for.step.2

   .section .text
   .globl main_for.step.2
main_for.step.2:
   # %var49 = load i32, ptr @i

   la t0, @i
   lw x3, 0(t0)
   # %var50 = add i32 %var49, 1

   addi x3, x3, 1
   # store i32 %var50, ptr @i

   la t1, @i
   sw x3, 0(t1)
   # br label %for.cond.2

   # phi start
   # phi end
   j main_for.cond.2

   .section .text
   .globl main_for.back.2
main_for.back.2:
   # %var52 = load i32, ptr @n

   la t0, @n
   lw x3, 0(t0)
   # store i32 %var52, ptr @i

   la t1, @i
   sw x3, 0(t1)
   # br label %for.cond.3

   # phi start
   # phi end
   j main_for.cond.3

   .section .text
   .globl main_for.cond.3
main_for.cond.3:
   # %var53 = load i32, ptr @i

   la t0, @i
   lw x3, 0(t0)
   # %var54 = icmp sgt i32 %var53, 0

   li t1, 0
   sub t2, x3, t1
   sgtz    x3, t2
   # br i1 %var54, label %for.body.3, label %for.back.3

   bne      x3, x0, .+8
   j main_for.back.3
   # phi start
   # phi end
   j main_for.body.3

   .section .text
   .globl main_for.body.3
main_for.body.3:
   # %var56 = load i32, ptr @i

   la t0, @i
   lw x3, 0(t0)
   # %var55 = call i32 @jud(i32 %var56)

   sw ra, 16(sp)
   mv a0, x3
   call jud
   lw ra, 16(sp)
   mv x3, a0
   # %var57 = icmp sgt i32 %var55, 0

   li t1, 0
   sub t2, x3, t1
   sgtz    x3, t2
   # br i1 %var57, label %if.then.2, label %if.else.2

   bne      x3, x0, .+8
   j main_if.else.2
   # phi start
   # phi end
   j main_if.then.2

   .section .text
   .globl main_if.then.2
main_if.then.2:
   # %var60 = load i32, ptr @i

   la t0, @i
   lw x3, 0(t0)
   # %var59 = call ptr @toString(i32 %var60)

   sw ra, 16(sp)
   mv a0, x3
   call toString
   lw ra, 16(sp)
   mv x3, a0
   # call void @print(ptr %var59)

   sw ra, 16(sp)
   mv a0, x3
   call print
   lw ra, 16(sp)
   sw a0, 12(sp)
   # ret i32 0

   li a0, 0
   addi sp, sp, 32
   lw t0, -12(sp)
   lw t1, -8(sp)
   lw t2, -4(sp)
   # phi start
   # phi end
   ret

   .section .text
   .globl main_if.else.2
main_if.else.2:
   # br label %if.back.2

   # phi start
   # phi end
   j main_if.back.2

   .section .text
   .globl main_if.back.2
main_if.back.2:
   # br label %for.step.3

   # phi start
   # phi end
   j main_for.step.3

   .section .text
   .globl main_for.step.3
main_for.step.3:
   # %var62 = load i32, ptr @i

   la t0, @i
   lw x3, 0(t0)
   # %var63 = sdiv i32 %var62, 2

   # store i32 %var63, ptr @i

   la t1, @i
   sw x3, 0(t1)
   # br label %for.cond.3

   # phi start
   # phi end
   j main_for.cond.3

   .section .text
   .globl main_for.back.3
main_for.back.3:
   # ret i32 0

   li a0, 0
   addi sp, sp, 32
   lw t0, -12(sp)
   lw t1, -8(sp)
   lw t2, -4(sp)
   # phi start
   # phi end
   ret

   .section .data
   .globl @a
@a:
   .word 0

   .section .data
   .globl @i
@i:
   .word 0

   .section .data
   .globl @n
@n:
   .word 0

